{"name": "test_create_booking", "status": "broken", "statusDetails": {"message": "TypeError: Session.request() got an unexpected keyword argument 'payload'", "trace": "def test_create_booking():\n        \"\"\"Test case for creating a booking.\"\"\"\n        headers = {\"Content-Type\": \"application/json\"}\n        payload = get_create_booking_payload()\n>       response = post_request(BOOKING_PATH, headers=headers, payload=payload)\n\nsrc\\tests\\crud\\test_crud.py:34: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nsrc\\helpers\\api_request_wrapper.py:9: in post_request\n    response = requests.post(url=url, headers=headers, payload=payload)\n.venv\\Lib\\site-packages\\requests\\api.py:115: in post\n    return request(\"post\", url, data=data, json=json, **kwargs)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nmethod = 'post', url = 'https://restful-booker.herokuapp.com/booking'\nkwargs = {'data': None, 'headers': {'Content-Type': 'application/json'}, 'json': None, 'payload': {'additionalneeds': 'Breakfast', 'bookingdates': {'checkin': '2024-10-10', 'checkout': '2024-10-11'}, 'depositpaid': True, 'firstname': 'Balraj', ...}}\nsession = <requests.sessions.Session object at 0x00000265F7D3EC30>\n\n    def request(method, url, **kwargs):\n        \"\"\"Constructs and sends a :class:`Request <Request>`.\n    \n        :param method: method for the new :class:`Request` object: ``GET``, ``OPTIONS``, ``HEAD``, ``POST``, ``PUT``, ``PATCH``, or ``DELETE``.\n        :param url: URL for the new :class:`Request` object.\n        :param params: (optional) Dictionary, list of tuples or bytes to send\n            in the query string for the :class:`Request`.\n        :param data: (optional) Dictionary, list of tuples, bytes, or file-like\n            object to send in the body of the :class:`Request`.\n        :param json: (optional) A JSON serializable Python object to send in the body of the :class:`Request`.\n        :param headers: (optional) Dictionary of HTTP Headers to send with the :class:`Request`.\n        :param cookies: (optional) Dict or CookieJar object to send with the :class:`Request`.\n        :param files: (optional) Dictionary of ``'name': file-like-objects`` (or ``{'name': file-tuple}``) for multipart encoding upload.\n            ``file-tuple`` can be a 2-tuple ``('filename', fileobj)``, 3-tuple ``('filename', fileobj, 'content_type')``\n            or a 4-tuple ``('filename', fileobj, 'content_type', custom_headers)``, where ``'content_type'`` is a string\n            defining the content type of the given file and ``custom_headers`` a dict-like object containing additional headers\n            to add for the file.\n        :param auth: (optional) Auth tuple to enable Basic/Digest/Custom HTTP Auth.\n        :param timeout: (optional) How many seconds to wait for the server to send data\n            before giving up, as a float, or a :ref:`(connect timeout, read\n            timeout) <timeouts>` tuple.\n        :type timeout: float or tuple\n        :param allow_redirects: (optional) Boolean. Enable/disable GET/OPTIONS/POST/PUT/PATCH/DELETE/HEAD redirection. Defaults to ``True``.\n        :type allow_redirects: bool\n        :param proxies: (optional) Dictionary mapping protocol to the URL of the proxy.\n        :param verify: (optional) Either a boolean, in which case it controls whether we verify\n                the server's TLS certificate, or a string, in which case it must be a path\n                to a CA bundle to use. Defaults to ``True``.\n        :param stream: (optional) if ``False``, the response content will be immediately downloaded.\n        :param cert: (optional) if String, path to ssl client cert file (.pem). If Tuple, ('cert', 'key') pair.\n        :return: :class:`Response <Response>` object\n        :rtype: requests.Response\n    \n        Usage::\n    \n          >>> import requests\n          >>> req = requests.request('GET', 'https://httpbin.org/get')\n          >>> req\n          <Response [200]>\n        \"\"\"\n    \n        # By using the 'with' statement we are sure the session is closed, thus we\n        # avoid leaving sockets open which can trigger a ResourceWarning in some\n        # cases, and look like a memory leak in others.\n        with sessions.Session() as session:\n>           return session.request(method=method, url=url, **kwargs)\nE           TypeError: Session.request() got an unexpected keyword argument 'payload'\n\n.venv\\Lib\\site-packages\\requests\\api.py:59: TypeError"}, "description": "Test case for creating a booking.", "start": 1729014168970, "stop": 1729014168970, "uuid": "70caa8bd-8766-42b1-8a56-1ff0235fe10d", "historyId": "4ebc59954ff712c19441b477a75d8210", "testCaseId": "4ebc59954ff712c19441b477a75d8210", "fullName": "src.tests.crud.test_crud#test_create_booking", "labels": [{"name": "parentSuite", "value": "src.tests.crud"}, {"name": "suite", "value": "test_crud"}, {"name": "host", "value": "DESKTOP-07C4ROQ"}, {"name": "thread", "value": "2284-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "src.tests.crud.test_crud"}]}